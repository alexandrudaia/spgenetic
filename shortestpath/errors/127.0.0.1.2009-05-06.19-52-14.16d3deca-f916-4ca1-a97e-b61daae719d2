(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/opedge/workspace/web2py/applications/shortestpath/controllers/app.py'
p4
sS'code'
p5
S'\nMIN_VERTEX_COUNT = 10\nMAX_VERTEX_COUNT = 101\nCELL_PREFIX = \'cell\'\nCELL_SEP = \'_\'\n\ndef index():\n    size_onchange = "ajax(\'" + URL(r=request, f=\'drawTable\') + "\',[\'size\'],\'graph_table\');"\n    size = SELECT(_name=\'size\', _value=\'10\', value=\'10\', _id=\'size\', _class=\'integer\',\n                  requires=IS_INT_IN_RANGE(MIN_VERTEX_COUNT, MAX_VERTEX_COUNT),\n                  _onchange=size_onchange, *range(MIN_VERTEX_COUNT, MAX_VERTEX_COUNT, 1))\n\n    oriented = SELECT(True, False, _name=\'oriented\', _id=\'oriented\',\n                      requires=IS_IN_SET([True, False]))\n\n    connectivity = INPUT(_type=\'text\', _name=\'connectivity\', _id=\'connectivity\',\n                         _size=\'2\', requires=IS_FLOAT_IN_RANGE(0, 1), value=\'0.5\')\n\n    fill_onclick = "ajax(\'" + URL(r=request, f=\'drawFilledTable\') + \\\n                    "\',[\'oriented\',\'connectivity\',\'size\',\'max_length\'],\'graph_table\');"\n    fill_button = INPUT(_type=\'button\', _value=\'Fill graph\', _onclick=fill_onclick)\n    max_length = INPUT(_type=\'text\', _name=\'max_length\', _id=\'max_length\', _size=3,\n                       requires=IS_INT_IN_RANGE(0, 10 ** 10),\n                       value=100)\n    form = FORM(TABLE(TR(\'Size\', size),\n                      TR(\'Cost\', DIV(makeTable(), _id=\'graph_table\')),\n                      TR(\'Oriented\', oriented),\n                      TR(\'Connectivity [0,1]\', connectivity),\n                      TR(\'Max Length\', max_length),\n                      TR(\'\', fill_button),\n                      TR(\'\', INPUT(_type=\'submit\', _value=\'Submit\'))))\n\n    if form.accepts(request.vars, session):\n        graph = makeGraphDictFromVars(int(request.vars.size), request.vars)\n        session.vars.graph = graph\n        session.vars.size = int(request.vars.size)\n        redirect(URL(r=request, f=\'options\'))\n\n    return dict(form=form)\n\ndef options():\n    from gluon.sqlhtml import form_factory\n    start_vertex = SQLField(\'start_vertex\', \'integer\', default=0,\n                            requires=IS_IN_SET(range(0, session.vars.size)))\n    stop_vertex = SQLField(\'stop_vertex\', \'integer\', default=session.vars.size - 1,\n                           requires=IS_IN_SET(range(0, session.vars.size)))\n    init_pop_length = SQLField(\'init_population_length\', \'integer\', default=1000,\n                               requires=IS_INT_IN_RANGE(0, 10 ** 10))\n    genes_count = SQLField(\'genes_count\', \'integer\', default=10,\n                           requires=IS_INT_IN_RANGE(0, 10 ** 10))\n    population_count = SQLField(\'population_count\', \'integer\', default=300,\n                                requires=IS_INT_IN_RANGE(0, 10 ** 10))\n\n    form = form_factory(start_vertex,\n                        stop_vertex,\n                        init_pop_length,\n                        genes_count,\n                        population_count)\n\n    if form.accepts(request.vars, session):\n        session.vars.start_vertex = int(request.vars.start_vertex)\n        session.vars.stop_vartex = int(request.vars.stop_vertex)\n        session.vars.init_population_length = int(request.vars.init_population_length)\n        session.vars.genes_count = int(request.vars.genes_count)\n        session.vars.population_count = int(request.vars.population_count)\n        redirect(URL(r=request, f=\'end\'))\n    return dict(form=form)\n\n\ndef end():\n    from applications.shortestpath.modules.shortestpath.graph import Graph\n    go_onclick = "ajax(\'" + URL(r=request, f=\'calculate\') + \\\n                    "\',[],\'result\');"\n    form = FORM(INPUT(_type=\'button\', _value=\'GO\', _onclick=go_onclick),\n                DIV(_id=\'result\'))\n    return dict(form=form)\n\ndef calculate():\n    if not session.results or len(session.results) == 10: session.results = []\n    f = open(\'tmp/population.log\', \'rt\')\n    f.close()\n    session.results.append(\'\xd1\x85\xd1\x83\xd0\xb9\')\n    session.results.sort()\n    return TABLE(*[TR(r) for r in session.results]).xml()\n\n\ndef drawFilledTable():\n    try:\n        numVertex = int(request.vars.size)\n        connectivity = float(request.vars.connectivity)\n        oriented = eval(request.vars.oriented)\n        maxLength = int(request.vars.max_length)\n        return makeTable(fill=True, numVertex=numVertex, maxLength=maxLength,\n                         connectivity=connectivity, oriented=oriented).xml()\n    except ValueError:\n        return makeTable().xml()\n\ndef makeGraphDictFromVars(size, vars):\n    gd = {}\n    for i in range(size):\n        gd[i] = {}\n        for k in range(size):\n            value = vars[CELL_PREFIX + CELL_SEP + str(i) + CELL_SEP + str(k)]\n            gd[i][k] = int(value) if value != \'\' else float(\'inf\')\n    return gd\n\ndef makeTable(fill=False, numVertex=10, connectivity=0.5, oriented=False, maxLength=100):\n    from applications.shortestpath.modules.shortestpath.graph import Graph, generateRandomGraph\n    graph = generateRandomGraph(numVertex, connectivity=connectivity,\n                                maxLength=maxLength, oriented=oriented) \\\n            if fill else None\n    trs = [TR(\'\', *[x for x in range(numVertex)])]\n    for i in range(numVertex):\n        tds = []\n        for k in range(numVertex):\n            v = \'\'\n            if fill:\n                v = graph[i][k] if graph[i][k] != float(\'inf\') else \'\'\n            tds.append(INPUT(_type=\'text\', _class=\'integer\',\n                             _name=CELL_PREFIX + CELL_SEP + str(i) + CELL_SEP + str(k), _size=\'1\',\n                             requires=IS_NULL_OR(IS_INT_IN_RANGE(0, 10 ** 10)),\n                             value=v))\n        trs.append(TR(i, *tds))\n    return TABLE(*trs)\n\ndef drawTable():\n    return makeTable(numVertex=int(request.vars.size)).xml()\n\n\nresponse._vars=response._caller(calculate)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/opedge/workspace/web2py/gluon/restricted.py", line 98, in restricted\n    exec ccode in environment\n  File "/home/opedge/workspace/web2py/applications/shortestpath/controllers/app.py", line 130, in <module>\n  File "/home/opedge/workspace/web2py/gluon/globals.py", line 75, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/opedge/workspace/web2py/applications/shortestpath/controllers/app.py", line 80, in calculate\n    f = open(\'tmp/population.log\', \'rt\')\nIOError: [Errno 2] No such file or directory: \'tmp/population.log\'\n'
p8
s.